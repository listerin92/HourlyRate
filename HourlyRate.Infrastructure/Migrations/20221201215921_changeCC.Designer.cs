// <auto-generated />
using System;
using HourlyRate.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HourlyRate.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221201215921_changeCC")]
    partial class changeCC
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Account.UserIdentityExt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.CostCategories.CostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CostCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "FloorSpace m2"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Power Consumption kWh"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Heating"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Cooling"
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "General Taxes"
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Direct Repairs"
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Available hours"
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Salable hours"
                        });
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AnnualChargeableHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("money");

                    b.Property<decimal>("AnnualHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("money");

                    b.Property<decimal>("AvgPowerConsumptionKwh")
                        .HasPrecision(18, 2)
                        .HasColumnType("money");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("FloorSpace")
                        .HasPrecision(18, 2)
                        .HasColumnType("money");

                    b.Property<bool>("IsUsingWater")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CostCenter");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Costs.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArticleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MachineId");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Costs.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Employee.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Prepress"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Press"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "WebPress"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "ManualLabor"
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Cutters"
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Stitchers"
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "Binders"
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "HardCover"
                        },
                        new
                        {
                            Id = 9,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "FrontCutter"
                        },
                        new
                        {
                            Id = 10,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            Name = "RotaryCutter"
                        });
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Employee.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            DepartmentId = 1,
                            FirstName = "Ivan",
                            ImageUrl = "https://www.loudegg.com/wp-content/uploads/2020/10/Mickey-Mouse.jpg",
                            IsEmployee = true,
                            JobTitle = "asdf",
                            LastName = "Ivanov"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            DepartmentId = 2,
                            FirstName = "Petar",
                            ImageUrl = "https://www.loudegg.com/wp-content/uploads/2020/10/Bugs-Bunny.jpg",
                            IsEmployee = true,
                            JobTitle = "asdf",
                            LastName = "Petrov"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            DepartmentId = 1,
                            FirstName = "Stefan",
                            ImageUrl = "https://www.loudegg.com/wp-content/uploads/2020/10/Fred-Flintstone.jpg",
                            IsEmployee = true,
                            JobTitle = "bbb",
                            LastName = "Todorov"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            DepartmentId = 1,
                            FirstName = "Georgi",
                            ImageUrl = "https://www.loudegg.com/wp-content/uploads/2020/10/SpongeBob-SqaurePants.jpg",
                            IsEmployee = true,
                            JobTitle = "asdf",
                            LastName = "Antonov"
                        });
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Employee.FinancialYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FinancialYears");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = false,
                            Year = 2015
                        },
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            Year = 2016
                        },
                        new
                        {
                            Id = 3,
                            IsActive = false,
                            Year = 2017
                        },
                        new
                        {
                            Id = 4,
                            IsActive = false,
                            Year = 2018
                        },
                        new
                        {
                            Id = 5,
                            IsActive = false,
                            Year = 2019
                        },
                        new
                        {
                            Id = 6,
                            IsActive = false,
                            Year = 2020
                        },
                        new
                        {
                            Id = 7,
                            IsActive = false,
                            Year = 2021
                        },
                        new
                        {
                            Id = 8,
                            IsActive = false,
                            Year = 2022
                        },
                        new
                        {
                            Id = 9,
                            IsActive = false,
                            Year = 2023
                        },
                        new
                        {
                            Id = 10,
                            IsActive = false,
                            Year = 2024
                        },
                        new
                        {
                            Id = 11,
                            IsActive = false,
                            Year = 2025
                        },
                        new
                        {
                            Id = 12,
                            IsActive = false,
                            Year = 2026
                        },
                        new
                        {
                            Id = 13,
                            IsActive = false,
                            Year = 2027
                        },
                        new
                        {
                            Id = 14,
                            IsActive = false,
                            Year = 2028
                        },
                        new
                        {
                            Id = 15,
                            IsActive = false,
                            Year = 2029
                        },
                        new
                        {
                            Id = 16,
                            IsActive = false,
                            Year = 2030
                        },
                        new
                        {
                            Id = 17,
                            IsActive = false,
                            Year = 2031
                        },
                        new
                        {
                            Id = 18,
                            IsActive = false,
                            Year = 2032
                        },
                        new
                        {
                            Id = 19,
                            IsActive = false,
                            Year = 2033
                        });
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("money");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ConsumableId")
                        .HasColumnType("int");

                    b.Property<int?>("CostCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialYearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConsumableId");

                    b.HasIndex("CostCategoryId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinancialYearId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5000m,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            EmployeeId = 1,
                            FinancialYearId = 8
                        },
                        new
                        {
                            Id = 2,
                            Amount = 2322m,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            EmployeeId = 2,
                            FinancialYearId = 8
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1211m,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            EmployeeId = 3,
                            FinancialYearId = 8
                        },
                        new
                        {
                            Id = 4,
                            Amount = 855m,
                            CompanyId = new Guid("457fc37b-b204-4019-9e5d-08dacf799bb2"),
                            EmployeeId = 4,
                            FinancialYearId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Account.UserIdentityExt", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.CostCategories.CostCategory", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.CostCenter", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Employee.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Costs.Consumable", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Costs.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId");

                    b.Navigation("Company");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Costs.Machine", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Employee.Department", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Employee.Employee", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Employee.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HourlyRate.Infrastructure.Data.Models.Expenses", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Costs.Consumable", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsumableId");

                    b.HasOne("HourlyRate.Infrastructure.Data.Models.CostCategories.CostCategory", "CostCategories")
                        .WithMany()
                        .HasForeignKey("CostCategoryId");

                    b.HasOne("HourlyRate.Infrastructure.Data.Models.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Employee.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Employee.FinancialYear", "FinancialYear")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Consumable");

                    b.Navigation("CostCategories");

                    b.Navigation("CostCenter");

                    b.Navigation("Employee");

                    b.Navigation("FinancialYear");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Account.UserIdentityExt", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Account.UserIdentityExt", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Account.UserIdentityExt", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HourlyRate.Infrastructure.Data.Models.Account.UserIdentityExt", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
